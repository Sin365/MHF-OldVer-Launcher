using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows.Forms;namespace MHF_OldVer_Launcher{    public struct CfgInfo    {        public string name;        public string ip;        public uint port;    }    public static class Config    {        public static Dictionary<string, string> DictCfg = new Dictionary<string, string>();        public static CfgInfo[] TargetServerCfg;        public static bool bLoaded = false;        public static void LoadCfg(string file)        {            try            {                DictCfg = ReadCfg(file);                List<CfgInfo> ports = new List<CfgInfo>();                ports.Add(new CfgInfo { name = DictCfg["Server1Name"].Trim(), ip = DictCfg["Server1IP"].Trim(), port = Convert.ToUInt32(DictCfg["Server1Port"]) });                ports.Add(new CfgInfo { name = DictCfg["Server2Name"].Trim(), ip = DictCfg["Server2IP"].Trim(), port = Convert.ToUInt32(DictCfg["Server2Port"]) });                ports.Add(new CfgInfo { name = DictCfg["Server3Name"].Trim(), ip = DictCfg["Server3IP"].Trim(), port = Convert.ToUInt32(DictCfg["Server3Port"]) });                TargetServerCfg = ports.ToArray();                bLoaded = true;            }            catch (Exception ex)            {                MessageBox.Show("cfg file Error!");            }        }        /// <summary>        /// 读取配置文件        /// </summary>        static Dictionary<string, string> ReadCfg(string file)        {            Dictionary<string, string> a = new Dictionary<string, string>()            {                { "Server1Name", "-" },                { "Server1IP", "-" },                { "Server1Port", "-" },                { "Server2Name", "-" },                { "Server2IP", "-" },                { "Server2Port", "-" },                { "Server3Name", "-" },                { "Server3IP", "-" },                { "Server3Port", "-" },            };            try            {                string cfg = string.Empty;                if (File.Exists(file))                {                    cfg = File.ReadAllText(file);                }                if (!string.IsNullOrEmpty(cfg))                {                    string[] b;                    foreach (var kv in cfg.Split(new string[] { "\r\n" }, StringSplitOptions.None))                    {                        b = kv.Split('=');                        if (b.Length == 2)                        {                            if (a.ContainsKey(b[0]))                            {                                if (string.IsNullOrEmpty(b[1]))                                {                                    continue;                                }                                else                                {                                    a[b[0]] = b[1];                                }                            }                        }                    }                }                return a;            }            catch (Exception ex)            {                Console.WriteLine($"->ReadCfgCatch->{ex.Message}");                return a;            }        }    }}